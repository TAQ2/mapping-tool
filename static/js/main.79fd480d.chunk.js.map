{"version":3,"sources":["MapLayers/VisitedPlaces.js","MapLayers/index.js","WelcomeMessage.js","Sidepanel.js","App.js","serviceWorker.js","index.js"],"names":["PopupMessage","name","latitude","longitude","setSelectedMarker","selectedMarker","useState","weather","setWeather","isLoading","setIsLoading","useEffect","axios","get","then","k","data","temperature","main","temp","toFixed","console","log","iconSrc","icon","id","iconName","visitedPlaces","closeOnClick","onClose","style","cursor","width","fontSize","src","alt","filter","textAlign","href","target","rel","VisitedPlaces","map","location","i","key","offsetLeft","size","onClick","color","CustomLayer","selectedLayer","Container","styled","animated","div","StyledGithubLink","a","Card","children","isClosed","isRight","setIsClosed","animation","useSpring","transform","opacity","from","position","right","top","Linky","delay","ease","WelcomeMessage","padding","display","alignItems","marginRight","StyledThing","StyledMinimiser","getWindowDimensions","window","innerWidth","height","innerHeight","SidePanel","layers","setSelectedLayer","isMinimised","setIsMinimised","fn","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","useMeasure","ref","bounds","animation2","ArrowIcon","MdKeyboardArrowLeft","MdKeyboardArrowRight","MdKeyboardArrowUp","MdKeyboardArrowDown","marginBottom","layer","length","type","checked","onChange","App","zoom","viewport","setViewport","isMapLoaded","setIsMapLoaded","mapRef","useRef","mapboxApiAccessToken","process","onViewportChange","mapStyle","onLoad","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79fd480d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Marker, Popup } from \"react-map-gl\";\nimport axios from \"axios\";\nimport { FaAsterisk } from \"react-icons/fa\";\n\nimport visitedPlaces from \"./visitedPlaces.json\";\n\nfunction convertKelvinToCelsius(k) {\n  return k - 273.15;\n}\n\nfunction PopupMessage({\n  name,\n  latitude,\n  longitude,\n  setSelectedMarker,\n  selectedMarker\n}) {\n  const [weather, setWeather] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // component is not unmounted when user selects a marker and then another\n    // so restart on loading on update instead\n    setIsLoading(true);\n    axios\n      .get(\n        \"http://api.openweathermap.org/data/2.5/weather?lat=\" +\n          latitude +\n          \"&lon=\" +\n          longitude +\n          \"&APPID=\" +\n          process.env.REACT_APP_WEATHER_API_TOKEN\n      )\n      .then(({ data }) => {\n        const temperature = convertKelvinToCelsius(data.main.temp).toFixed(2);\n        console.log(data);\n        const iconSrc =\n          \"http://openweathermap.org/img/wn/\" +\n          data.weather[0].icon +\n          \"@2x.png\";\n\n        setWeather({\n          temperature,\n          iconSrc,\n          id: data.id,\n          iconName: data.weather[0].main\n        });\n        setIsLoading(false);\n      });\n  }, [latitude, longitude]);\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <Popup\n      {...visitedPlaces[selectedMarker]}\n      closeOnClick={false}\n      onClose={() => {\n        setSelectedMarker(null);\n      }}\n    >\n      <div style={{ cursor: \"default\", width: \"295px\" }}>\n        <div style={{ fontSize: 32 }}>{name}</div>\n        <div style={{ width: \"30%\" }}>\n          <img\n            src={weather.iconSrc}\n            alt=\"weather-icon\"\n            style={{\n              width: \"100%\",\n              filter: weather.iconName === \"Clouds\" ? \"contrast(0.5)\" : null\n            }}\n          />\n          <div style={{ textAlign: \"center\" }}>\n            {weather.temperature} &#8451;\n          </div>\n        </div>\n        <a\n          href={\"https://openweathermap.org/city/\" + weather.id}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Find out more\n        </a>\n      </div>\n    </Popup>\n  );\n}\n\nexport default function VisitedPlaces() {\n  const [selectedMarker, setSelectedMarker] = useState();\n\n  return (\n    <>\n      {visitedPlaces.map((location, i) => {\n        const iconSize = 20;\n        return (\n          <Marker key={i} {...location} offsetLeft={-iconSize / 2}>\n            <FaAsterisk\n              size={iconSize}\n              onClick={() => {\n                setSelectedMarker(i);\n              }}\n              style={{\n                cursor: \"pointer\",\n                color: i === selectedMarker ? \"purple\" : null\n              }}\n            />\n          </Marker>\n        );\n      })}\n      {selectedMarker != null && (\n        <PopupMessage\n          {...visitedPlaces[selectedMarker]}\n          setSelectedMarker={setSelectedMarker}\n          selectedMarker={selectedMarker}\n        />\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport VisitedPlaces from \"./VisitedPlaces\";\n\nexport default function CustomLayer({ selectedLayer }) {\n  switch (selectedLayer) {\n    case \"Places Arjun has visited in the UK\":\n      return <VisitedPlaces />;\n    default:\n      return null;\n  }\n}\n","import React, { useState } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport styled from \"styled-components\";\nimport { FaGlobeAmericas } from \"react-icons/fa\";\nimport { MdClose } from \"react-icons/md\";\nimport { AiFillGithub } from \"react-icons/ai\";\n\n// @Cleanup - this file should be called toaster\n// @Cleanup - media queries are bad, check forum app\n\nconst Container = styled(animated.div)`\n  background-color: rgba(255, 255, 255, 0.8);\n  position: fixed;\n  cursor: default;\n  border-radius: 5px;\n\n  @media (min-width: 900px) {\n    top: 10px;\n    right: 10px;\n    width: 500px;\n  }\n\n  @media (max-width: 900px) {\n    top: unset; // @Incomplete - do we need this?\n    right: 10%;\n    width: 80%;\n    bottom: 4%;\n  }\n\n  @media (max-width: 600px) {\n    right: 2%;\n    width: 96%;\n    bottom: 4%;\n  }\n`;\n\nconst StyledGithubLink = styled(animated.a)`\n  position: fixed;\n\n  @media (min-width: 451px) {\n    top: 15px;\n    right: 15px;\n  }\n\n  @media (max-width: 450px) {\n    right: 40px;\n    bottom: 6px;\n  }\n`;\n\nfunction Card({ children, isRight, isClosed, setIsClosed }) {\n  const animation = useSpring({\n    transform: \"translateX(0px)\",\n    opacity: isClosed ? 0 : 1,\n    from: { transform: \"translateX(50px)\", opacity: 0 }\n  });\n\n  return (\n    <Container style={animation}>\n      <div\n        style={{\n          position: \"absolute\",\n          right: 5,\n          top: 5,\n          cursor: \"pointer\"\n        }}\n      >\n        <MdClose\n          onClick={() => {\n            setIsClosed(true);\n          }}\n        />\n      </div>\n      {children}\n    </Container>\n  );\n}\n\n// @Question - does it make sense to have the github link here?\n// @Cleanup - bad name\nfunction Linky() {\n  const animation = useSpring({\n    opacity: 1,\n    from: { opacity: 0 },\n    delay: 1000,\n    ease: 10000\n  });\n\n  return (\n    <StyledGithubLink\n      style={animation}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      href=\"https://www.github.com/taq2/mapping-tool\"\n    >\n      <AiFillGithub size={30} color=\"black\" />\n    </StyledGithubLink>\n  );\n}\n\nexport default function WelcomeMessage() {\n  const [isClosed, setIsClosed] = useState(false);\n\n  return (\n    <>\n      <Card isClosed={isClosed} setIsClosed={setIsClosed}>\n        <div\n          style={{\n            padding: \"15px 25px\",\n            display: \"flex\",\n            alignItems: \"center\"\n          }}\n        >\n          <div style={{ marginRight: 20 }}>\n            <FaGlobeAmericas size={40} color=\"purple\" />\n          </div>\n          <span>\n            Welcome to the map visualization tool. I explore how render\n            different metrics on a map while maintaining simple UI/UX. Link to\n            github?\n          </span>\n        </div>\n      </Card>\n      {isClosed && <Linky />}\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useSpring, animated } from \"react-spring\";\nimport useMeasure from \"react-use-measure\";\nimport {\n  MdKeyboardArrowUp,\n  MdKeyboardArrowRight,\n  MdKeyboardArrowLeft,\n  MdKeyboardArrowDown\n} from \"react-icons/md\";\n\nconst StyledThing = styled(animated.div)`\n  background-color: rgba(255, 255, 255, 0.8);\n  position: fixed;\n  cursor: default;\n  top: 10px;\n  padding: 15px 25px;\n\n  @media (min-width: 401px) {\n    border-radius: 5px;\n    left: 10px;\n  }\n\n  @media (max-width: 400px) {\n    top: 0%;\n    left: 0%;\n    width: 100%;\n  }\n`;\n\nconst StyledMinimiser = styled.div`\n  position: absolute;\n  background-color: rgba(230, 230, 230, 0.5);\n  display: flex;\n  cursor: pointer;\n  border-radius: 4px;\n\n  @media (min-width: 401px) {\n    right: -32px;\n    top: 0;\n  }\n\n  @media (max-width: 400px) {\n    bottom: -32px;\n    left: 0;\n  }\n`;\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction useWindowDimensions(fn) {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n      fn(); // @incomplete - this is weird behaviour that invokes the side panel to be untoggled when there is a resize\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [fn]);\n\n  return windowDimensions;\n}\n\nexport default function SidePanel({ layers, setSelectedLayer, selectedLayer }) {\n  const [isMinimised, setIsMinimised] = useState(false);\n\n  const { width } = useWindowDimensions(() => {\n    if (isMinimised) {\n      setIsMinimised(false);\n    }\n  });\n\n  const [ref, bounds] = useMeasure();\n\n  const animation = useSpring({\n    transform: `translateX(${isMinimised ? -(bounds.width + 10) : 0}px)`,\n    opacity: 1,\n    from: { opacity: 0 }\n  });\n\n  const animation2 = useSpring({\n    transform: `translateY(${isMinimised ? -bounds.height : 0}px)`,\n    opacity: 1,\n    from: { opacity: 0 }\n  });\n\n  let ArrowIcon = MdKeyboardArrowLeft;\n\n  if (isMinimised) {\n    ArrowIcon = MdKeyboardArrowRight;\n  }\n\n  if (width < 400) {\n    ArrowIcon = MdKeyboardArrowUp;\n    if (isMinimised) {\n      ArrowIcon = MdKeyboardArrowDown;\n    }\n  }\n\n  return (\n    <StyledThing style={width < 400 ? animation2 : animation} ref={ref}>\n      <StyledMinimiser\n        onClick={() => {\n          setIsMinimised(!isMinimised);\n        }}\n      >\n        <ArrowIcon size={30} color=\"gray\" />\n      </StyledMinimiser>\n      <div style={{ marginBottom: 20 }}>\n        <strong style={{ fontSize: 28 }}>Choose A Data Layer</strong>\n      </div>\n\n      {layers.map((layer, i) => (\n        <div\n          key={layer}\n          style={{\n            cursor: \"pointer\",\n            marginBottom: i === layers.length - 1 ? 0 : 20,\n            display: \"flex\"\n          }}\n          onClick={() => {\n            if (layer === selectedLayer) {\n              setSelectedLayer();\n            } else {\n              setSelectedLayer(layer);\n            }\n          }}\n        >\n          <input\n            type=\"checkbox\"\n            checked={layer === selectedLayer}\n            style={{ marginRight: 10 }}\n            onChange={() => {}} // @Incomplete - this is to stop the warning in console from react about readonly field\n          />\n          {layer}\n        </div>\n      ))}\n    </StyledThing>\n  );\n}\n","import React, { useState, useRef } from \"react\";\nimport ReactMapGL from //, { MapController }\n\"react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\n// import Geocoder from \"react-map-gl-geocoder\";\n\nimport MapLayers from \"./MapLayers\";\n\nimport WelcomeMessage from \"./WelcomeMessage\";\nimport Sidepanel from \"./Sidepanel\";\n\n// class CustomMapController extends MapController {\n//   _onPan(event) {\n//     // ignore pan on geocoder input\n//     if (this._isGeocoderInputNode(event.target)) {\n//       return;\n//     }\n//\n//     super._onPan(event);\n//   }\n//\n//   _onDoubleTap(event) {\n//     // ignore double taps on geocoder input\n//     if (this._isGeocoderInputNode(event.target)) {\n//       return;\n//     }\n//\n//     super._onDoubleTap(event);\n//   }\n//\n//   _isGeocoderInputNode(node) {\n//     return node.classList.contains(\"mapboxgl-ctrl-geocoder--input\");\n//   }\n// }\n\n// const customMapController = new CustomMapController();\n\nconst layers = [\n  \"Places Arjun has visited in the UK\",\n  \"UK General Election Results 2017\",\n  \"Weather Map\",\n  \"House Prices data from Zoopla\"\n  // \"Fill in your visted places\"\n];\n\n// const geojson = {\n//   type: \"FeatureCollection\",\n//   features: [\n//     {\n//       type: \"Feature\",\n//       geometry: { type: \"Point\", coordinates: [-4.697303, 53.456371] }\n//     }\n//   ]\n// };\n\nfunction App() {\n  const [viewport, setViewport] = useState({\n    latitude: 53.456371,\n    longitude: -4.697303,\n    width: \"100vw\",\n    height: \"100vh\",\n    zoom: 5\n  });\n\n  const [selectedLayer, setSelectedLayer] = useState();\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n\n  const mapRef = useRef();\n\n  return (\n    <>\n      <ReactMapGL\n        {...viewport}\n        ref={mapRef}\n        // controller={customMapController}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        onViewportChange={setViewport}\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n        onLoad={() => {\n          setIsMapLoaded(true);\n        }}\n      >\n        {/* <Geocoder\n          mapRef={mapRef}\n          placeholder={\"Where should Arjun go next...\"}\n          // onResults={console.log}\n          position=\"top-left\"\n          style={{ width: 600 }}\n          // the following is called when the user clicks\n          onViewportChange={viewport => {\n            setViewport(viewport);\n            setVisitedLocations([\n              ...visitedLocations,\n              {\n                latitude: viewport.latitude,\n                longitude: viewport.longitude\n              }\n            ]);\n          }}\n          mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        /> */}\n        {/* <Source id=\"my-data\" type=\"geojson\" data={geojson}>\n          <Layer\n            type=\"circle\"\n            paint={{\n              \"circle-radius\": 10,\n              \"circle-color\": \"#007cbf\"\n            }}\n          />\n        </Source> */}\n        <MapLayers selectedLayer={selectedLayer} />\n        {isMapLoaded && (\n          <Sidepanel\n            layers={layers}\n            selectedLayer={selectedLayer}\n            setSelectedLayer={setSelectedLayer}\n          />\n        )}\n\n        {isMapLoaded && <WelcomeMessage />}\n      </ReactMapGL>\n    </>\n  );\n}\n\nexport default App;\n\n// make ui components not draggable via map controller\n// to do add more places I've been to\n// use deck.gl\n// add testing?\n// add redux?\n// add how long would it take to travel to all these places starting from london\n// add more data views\n// https://www.freecodecamp.org/news/create-your-own-santa-tracker-with-gatsby-and-react-leaflet/\n\n// STEPS\n// Clean up the code\n// Figure out what to write in the info message\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}